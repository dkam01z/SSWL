from functools IMPORT wraps

from flask.sessions IMPORT NullSession

from wtforms.fields.core IMPORT BooleanField, DateField, DecimalField, FloatField, IntegerField, SelectField, SelectMultipleField, TimeField

from data IMPORT Events

from flask IMPORT Flask , render_template, flash, redirect, url_for , session , logging, request

from flask_mysqldb IMPORT MySQL

from wtforms IMPORT Form, StringField, TextAreaField,PasswordField, validators, SelectField

from passlib.hash IMPORT sha256_crypt

from functools IMPORT wraps

IMPORT socket

from flask_admin IMPORT Admin

from flask_mail IMPORT Mail, Message

from itsdangerous IMPORT URLSafeTimedSerializer, SignatureExpired

from flask_admin.contrib.sqla IMPORT ModelView

from wtforms IMPORT validators

from wtforms.fields.html5 IMPORT EmailField

from flask IMPORT blueOUTPUTs



IMPORT email_validator

from datetime IMPORT datetime

IMPORT stripe

IMPORT json

IMPORT os

from flask IMPORT jsonify



SET app TO Flask(__name__, static_folder='templates',

            static_url_path='', template_folder='templates')

app.config.from_pyfile('config.cfg')







socket.getaddrinfo('127.0.0.1', 5000)



# Adjust MySQL

SET app.config['STRIPE_PUBLIC_KEY'] TO 'pk_test_51JwcNHGRdaLZqAsn471bhT6wudwnnIgd5Qw60rPdBHe0zTE3dNdy75m48hFtqkbGffDfT9UyoAvOoqPGOJj6R9k8008yG075hU'

SET app.config['STRIPE_SECRET_KEY'] TO 'sk_test_51JwcNHGRdaLZqAsnPHbMePhcH4YliIzsU0SoUXJJZGmpTUIztj8bO6YGyzVmEzn5QwQcUN7Y22DyVyyJVxopMP7600hu1tZfrB'

SET app.config['MYSQL_HOST'] TO 'localhost'

SET app.config['MYSQL_USER'] TO 'root'

SET app.config['MYSQL_PASSWORD'] TO 'SPDASDDLP334DZX'

SET app.config['MYSQL_DB'] TO 'sswl'

SET app.config['MYSQL_CURSORCLASS'] TO 'DictCursor'



SET stripe.api_key TO app.config['STRIPE_SECRET_KEY']

#INITIALIZE MYSQL

SET mysql TO MySQL(app)





@app.route("/")

DEFINE FUNCTION index():

    RETURN render_template('home.html')



DEFINE FUNCTION calculate_order_amount(items):

    # Replace this constant with a calculation of the order's amount

    # Calculate the order total on the server to prevent

    # people from directly manipulating the amount on the client

    RETURN 1400





@app.route('/create-payment-intent', methods=['POST'])

DEFINE FUNCTION create_payment():

    TRY:

        SET data TO json.loads(request.data)

        # Create a PaymentIntent with the order amount and currency

        SET intent TO stripe.PaymentIntent.create(

            amount=calculate_order_amount(data['items']),

            currency='eur',

            automatic_payment_methods={

                'enabled': True,

            },

        )

        RETURN jsonify({

            'clientSecret': intent['client_secret']

        })

    except Exception as e:

        RETURN jsonify(error=str(e)), 403



@app.route('/about')

DEFINE FUNCTION about():

    RETURN render_template('about.html')



@app.route('/events')

DEFINE FUNCTION events():

    SET cur TO mysql.connection.cursor()



    SET result TO cur.execute("SELECT * FROM events")

    SET events TO cur.fetchall()



    IF result > 0:

        RETURN render_template('events.html', events=events)

    ELSE:

        SET msg TO 'No events found'

        RETURN render_template('events.html', msg=msg)

    cur.close()





@app.route('/event/<string:EVENT_ID>/')

DEFINE FUNCTION event(EVENT_ID):

    SET cur TO mysql.connection.cursor()



    SET result TO cur.execute("SELECT * FROM events WHERE EVENT_ID TO %s", [EVENT_ID])

    SET event TO cur.fetchone()

    cur.close()

    RETURN render_template('event.html', event=event)







DEFINE CLASS RegisterForm(Form):

    SET firstname TO StringField('First Name', [validators.Length(min=1 , max=50)])

    SET surname TO StringField('Surname', [validators.Length(min=1,max=25)])

    SET number TO StringField('Number', [validators.Length(min=7, max=14)])

    SET email TO StringField('Email address', [validators.DataRequired(), validators.Email()])

    SET sfirstname TO StringField('Student firstname', [validators.Length(min=1,max=50)])

    SET ssurname TO StringField('Student Surname', [validators.Length(min=1,max=50)])

    SET password TO PasswordField('password', [

        validators.DataRequired(),

        validators.EqualTo('confirm', message='Password does not match!')

    ])

    SET confirm TO PasswordField('Confirm Password')

    SET fgroup TO SelectField('Select form group', choices=['Mr BotMan' , 'Mr Embassador', 'Mr Mike', 'Miss Puff', 'Miss many'])

    SET ygroup TO SelectField('Select year group' , choices=['Year 10', 'Year 11', 'Year 12', 'Year 13'])







@app.route('/register', methods=['GET', 'POST'])

DEFINE FUNCTION register():

    SET form TO RegisterForm(request.form)

    IF request.method EQUALS 'POST' and form.validate():

        SET firstname TO form.firstname.data

        SET surname TO form.surname.data

        SET email TO form.email.data

        SET number TO form.number.data

        SET sfirstname TO form.sfirstname.data

        SET ssurname TO form.ssurname.data

        SET password TO sha256_crypt.encrypt(str(form.password.data))

        SET fgroup TO form.fgroup.data

        SET ygroup TO form.ygroup.data

        



        SET cur TO mysql.connection.cursor()





        cur.execute("INSERT INTO parents(firstname, surname, email, number, password) VALUES(%s,%s,%s,%s,%s)", (firstname,surname,email, number,password))



 

        cur.execute("INSERT INTO student(PARENT_ID, sfirstname, ssurname, fgroup, ygroup)  VALUES(LAST_INSERT_ID(),%s,%s,%s,%s)", (sfirstname,ssurname,fgroup,ygroup))





        



        cur.execute("INSERT INTO yearformgroup(YGROUP, FGROUP) VALUES(%s,%s) ", (ygroup, fgroup))







        #commit

        mysql.connection.commit()

        #close connection

        cur.close()

        #flash

        flash('You have successfully registered! You can login.', 'success')

        

        RETURN redirect(url_for('index'))

    RETURN render_template('register.html', form=form)







DEFINE FUNCTION is_logged_in(f):

    @wraps(f)

    DEFINE FUNCTION wrap(*args , **kwargs):

        IF 'logged_in' IN session:

            RETURN f(*args , **kwargs)

        ELSE:

            flash('Unauthorized, please attempt to login', 'danger')

            RETURN redirect(url_for('login'))

    RETURN wrap



DEFINE FUNCTION Alreadyloggedin(f):

    @wraps(f)

    DEFINE FUNCTION wrap(*args , **kwargs):

        IF 'logged_in' IN session:

            flash('You are already logged in', 'danger')

            RETURN redirect(url_for('dashboard'))

        ELSE:

            RETURN f(*args , **kwargs)

    RETURN wrap





SET mail TO Mail(app)



SET s TO URLSafeTimedSerializer('Thisisasecret!')





DEFINE CLASS PasswordResetForm(Form):

    SET password TO PasswordField('password', [

    validators.DataRequired(),

    validators.EqualTo('confirm', message='Password does not match!')

    ])

    SET confirm TO PasswordField('Confirm Password')



DEFINE CLASS ResetEmail(Form):

    SET email TO EmailField('Email', [validators.DataRequired()])



@app.route('/forgot', methods=['GET', 'POST'])

DEFINE FUNCTION reset():

    SET form TO ResetEmail(request.form)

    IF request.method EQUALS 'GET':

        RETURN render_template('forgot.html', form=form)



    SET email TO request.form['email']

    SET cur TO mysql.connection.cursor()

    SET x TO cur.execute("SELECT * FROM parents WHERE email TO (%s)", (email,))

    IF int(x) EQUALS 0:

        flash("Email not found, try again", "danger")

    ELSE:

        SET token TO s.dumps(email, salt='email-confirm')



        SET msg TO Message('Confirm Email', sender='dankamran1@gmail.com', recipients=[email])



        SET link TO url_for('confirm_email', token=token, _external=True)



        SET msg.body TO 'Your link is {}'.format(link)



        mail.send(msg)



        IF SignatureExpired:

            flash("session expired", "danger")

        ELSE:

            RETURN '<h1>The email you entered is {}. The token is {}</h1>'.format(email, token)



    mysql.connection.commit()

    cur.close()

    RETURN render_template('forgot.html', form=form)





@app.route('/confirm_email/<token>', methods=['GET', 'POST']) 

DEFINE FUNCTION confirm_email(token):

    SET form TO PasswordResetForm(request.form)

    SET form2 TO ResetEmail(request.form)

    IF request.method EQUALS 'POST' and form.validate():

        SET email TO form2.email.data

        SET password TO sha256_crypt.encrypt(str(form.password.data))

        SET cur TO mysql.connection.cursor()

        cur.execute("UPDATE PARENTS SET PASSWORD=%s where email=%s", (password, email))

        mysql.connection.commit()

        cur.close()

        SET email TO s.loads(token, salt='email-confirm', max_age=3600) 



        flash('Updated Password, Success!', 'success')

        IF SignatureExpired:

            '<h1>Token expired<h1>'

        RETURN redirect(url_for('index'))

    RETURN render_template('confirm_email.html' , form=form)





# User Login!

@app.route('/login', methods=['GET', 'POST'])

@Alreadyloggedin

DEFINE FUNCTION login():

    global admin

    IF request.method EQUALS 'POST':

        SET email TO request.form['email']

        SET password_candidate TO request.form['password']

        SET cur TO mysql.connection.cursor()

        SET result TO cur.execute("SELECT * FROM parents WHERE email TO %s ", [email])

        IF result > 0:

            #GET STORED HASH

            SET data TO cur.fetchone()

            SET password TO data['password']

            IF sha256_crypt.verify(password_candidate , password):

                SET session['logged_in'] TO True

                SET session['email'] TO email

                flash('You have logged IN successfully', 'success')

                RETURN redirect(url_for('dashboard'))

            ELSE:

                flash('Password / email is not correct try again', 'danger')

                 

        ELSE:

            SET error TO 'Email not found'

            RETURN render_template('login.html', error=error)

    RETURN render_template('login.html')



@app.route('/loginadmin', methods=['GET', 'POST'])

@Alreadyloggedin

DEFINE FUNCTION loginadmin():

    IF request.method EQUALS 'POST':

        SET email TO request.form['email']

        SET password_candidate TO request.form['password']

        SET cur TO mysql.connection.cursor()

        SET result TO cur.execute("SELECT * FROM admin WHERE email TO %s ", [email])

        IF result > 0:

            #GET STORED HASH

            SET data TO cur.fetchone()

            SET password TO data['password']

            IF sha256_crypt.verify(password_candidate , password):

                SET session['logged_in'] TO True

                SET session['email'] TO email

                IF session['email'] EQUALS 'dankamran1@gmail.com':

                    SET admin TO True

                    flash('Welcome admin danish', 'success')

                    RETURN redirect(url_for('admindashboard'))

            ELSE:

                flash('Password / email is not correct try again', 'danger')

                 

        ELSE:

            SET error TO 'Email not found'

            RETURN render_template('login.html', error=error) 

    RETURN render_template('loginadmin.html')







@app.route('/event/<string:EVENT_ID>/confirmation')

DEFINE FUNCTION confirmation(EVENT_ID):

    SET cur TO mysql.connection.cursor()

    SET cur.execute("SELECT * FROM events WHERE EVENT_ID TO %s", [EVENT_ID])

    SET event TO cur.fetchone()



    cur.close()

    RETURN render_template('confirmation.html' , event=event)



@app.route('/logout')

DEFINE FUNCTION logout():

    session.clear()

    flash('You have suessfully logged out', 'success')

    RETURN redirect(url_for('login'))   



@app.route('/dashboard' , methods=['GET'])

@is_logged_in

DEFINE FUNCTION dashboard():

    IF request.method EQUALS 'GET':

        SET cur TO mysql.connection.cursor()



        SET result TO cur.execute("Select tb2.*, tb3.PARENT_ID , tb4.email FROM EVENTS tb2 LEFT JOIN student_event tb1 ON tb2.EVENT_ID TO tb1.EVENT_ID RIGHT JOIN STUDENT tb3 ON tb1.student_id TO tb3.STUDENT_ID RIGHT JOIN PARENTS tb4 ON tb3.PARENT_ID TO tb4.Parent_id WHERE applied=0 and email=%s", [session['email']] )

        events =cur.fetchall()



        IF result >0:

            RETURN render_template('dashboard.html' , events=events)

        ELSE:

            SET msg TO 'No events found'

            RETURN render_template('dashboard.html', msg=msg)

        cur.close()





@app.route('/admin-dashboard' , methods=['GET'])

@is_logged_in

DEFINE FUNCTION admindashboard():

    IF request.method EQUALS 'GET':

        SET cur TO mysql.connection.cursor()



        SET result TO cur.execute("select * from events" )

        events =cur.fetchall()



        IF result >0:

            RETURN render_template('admin-dashboard.html' , events=events)

        ELSE:

            SET msg TO 'No events found'

            RETURN render_template('admin-dashboard.html', msg=msg)

        cur.close()





@app.route('/check/<string:EVENT_ID>')

DEFINE FUNCTION check(EVENT_ID):

    SET cur TO mysql.connection.cursor()



    SET result TO cur.execute("Select tb2.*, tb1.student_id, tb1.EVENT_ID, tb3.* FROM STUDENT tb2 LEFT JOIN student_event tb1 ON tb2.STUDENT_ID TO tb1.student_id RIGHT JOIN parents tb3 on tb3.PARENT_ID TO tb2.PARENT_ID where applied TO 0 and EVENT_ID TO %s", (EVENT_ID,))

    SET students TO cur.fetchall()

    

    IF result > 0:

        RETURN render_template('check.html' , students=students)

    ELSE:

        SET msg TO 'No events found'

        RETURN render_template('check.html', msg=msg)

    



    

    cur.close()



DEFINE CLASS eventform(Form):

    SET eventname TO StringField('Event', [validators.Length(min=1 , max=50)])

    SET body TO TextAreaField('Body', [validators.Length(min=25)])

    SET fee TO FloatField('Fee')

    SET time_from TO TimeField('Time from')

    SET time_to TO TimeField('Time to')

    SET trip_date TO DateField('Trip date')

    SET creator TO StringField('Creator')

    SET Number_of_days TO IntegerField('Number of days')

    SET event_organiser TO StringField('Event organiser', [validators.Length(min=3, max=50)])

    SET ygroup TO SelectField('Year group', choices=['Year 10','Year 11', 'Year 12','Year 13'])

    SET event_type TO SelectField('Event type ', choices=['Parents evening', 'Trip'])



@app.route('/add_event', methods= ['GET', 'POST'])

DEFINE FUNCTION add_event():

    SET form TO eventform(request.form)

    IF request.method EQUALS 'POST' and form.validate():

        SET eventname TO form.eventname.data

        SET body TO form.body.data

        SET fee TO form.fee.data

        SET time_from TO form.time_from.data

        SET time_to TO form.time_to.data

        SET trip_date TO form.trip_date.data

        SET creator TO form.creator.data

        SET Number_of_days TO form.Number_of_days.data

        SET event_organiser TO form.event_organiser.data

        SET ygroup TO form.ygroup.data

        SET event_type TO form.event_type.data 





        SET cur TO mysql.connection.cursor()

        cur.execute("INSERT INTO event_organiser(E_organiser) VALUES(%s)", (event_organiser,))

        cur.execute("INSERT INTO eventtype(EVENT_TYPE) VALUES(%s)", (event_type,))

        cur.execute("INSERT INTO events(eventname, body,fee,timefrom, timeto,trip_date,creator,Number_of_days,ygroup,organiser_ID,eventtype_id) VALUES (%s, %s,%s,%s,%s,%s,%s,%s,%s,LAST_INSERT_ID(), LAST_INSERT_ID())", ( eventname, body,fee,time_from, time_to,trip_date,session['email'],Number_of_days,ygroup))

        SET cur.execute("SELECT * FROM EVENTS WHERE eventname TO %s", [eventname])





        cur.execute("select * from student" )

        SET x TO cur.fetchone()

        SET student_id TO x['STUDENT_ID']

        cur.execute("insert into student_event(student_id, event_id, applied,eventname) VALUES (%s,LAST_INSERT_ID(),%s,%s) ", (student_id, False,eventname) )



        cur.execute("insert into student_event(student_id, event_id, applied,eventname)  VALUES (%s,LAST_INSERT_ID(),%s,%s) ", ('40', False, eventname) )





        mysql.connection.commit()

        cur.close()



        flash('Event created', 'success')

        RETURN redirect(url_for('admindashboard'))

    RETURN render_template('add_event.html', form=form)





@app.route('/edit_event/<string:EVENT_ID>', methods= ['GET', 'POST'])

DEFINE FUNCTION edit_event(EVENT_ID):

    

    SET cur TO mysql.connection.cursor()



    SET result TO cur.execute("SELECT * FROM events where EVENT_ID  TO %s" , [EVENT_ID])

    

    SET event TO cur.fetchone()



    result2= cur.execute("SELECT * FROM EVENT_ORGANISER")



    SET organiser TO cur.fetchone()



    SET result3 TO cur.execute("SELECT * FROM  EVENTTYPE")



    SET eventtype TO cur.fetchone()





    



    SET form TO eventform(request.form)



    SET form.eventname.data TO event['eventname']

    SET form.body.data TO event['body']

    SET form.fee.data TO event['fee']

    SET form.time_from.data TO event['timefrom']

    SET form.time_to.data TO event['timeto']

    SET form.trip_date.data TO event['trip_date']

    SET form.creator.data TO event['creator']

    SET form.event_organiser.data TO organiser['E_ORGANISER']

    SET form.Number_of_days.data TO event['Number_of_days']

    SET form.ygroup.data TO event['ygroup']

    SET form.event_type.data TO eventtype['event_type']

    



    IF request.method EQUALS 'POST' and form.validate():

        SET eventname TO request.form['eventname']

        SET body TO request.form['body']

        SET fee TO request.form['fee']

        SET #time_from TO request.form['time_from']

        SET #time_to TO request.form['time_to']

        SET trip_date TO request.form['trip_date']

        SET creator TO form.creator.data

        SET organiser TO request.form['event_organiser']

        SET Number_of_days TO request.form['Number_of_days']

        SET ygroup TO request.form['ygroup']

        SET event_type TO request.form['event_type']

        







        SET cur TO mysql.connection.cursor()



        cur.execute("UPDATE events SET eventname=%s, body=%s , fee=%s , trip_date=%s, creator=%s, Number_of_days=%s, ygroup=%s WHERE EVENT_ID=%s" , (eventname, body, fee, trip_date, creator, Number_of_days, ygroup, EVENT_ID))

        SET cur.execute("UPDATE EVENT_ORGANISER tb2 LEFT JOIN EVENTS tb1 on tb1.organiser_id TO tb2.organiser_id SET e_organiser=%s where EVENT_ID =%s  ", (organiser , EVENT_ID))

        SET cur.execute("UPDATE eventtype tb2 LEFT JOIN EVENTS tb1 on tb1.eventtype_id TO tb2.eventtype_id SET event_type=%s where EVENT_ID =%s  ", (event_type , EVENT_ID))

        mysql.connection.commit()



        cur.close()



        flash('Event updated', 'success')

        RETURN redirect(url_for('admindashboard'))

    RETURN render_template('edit_event.html', form=form)



@app.route('/delete_event/<string:EVENT_ID>', methods= ['POST'] )

@is_logged_in

DEFINE FUNCTION delete_event(EVENT_ID):

    SET cur TO mysql.connection.cursor()

    SET cur.execute("DELETE FROM events WHERE EVENT_ID TO %s", [EVENT_ID])

    mysql.connection.commit()

    cur.close()

    flash('Event deleted' , 'success')

    RETURN redirect(url_for('admindashboard'))



@app.route('/event/<string:EVENT_ID>/apply', methods= ['POST'] )

DEFINE FUNCTION apply(EVENT_ID):

    IF request.method EQUALS 'POST':

        SET cur TO mysql.connection.cursor()

        SET cur.execute("SELECT * FROM parents where email TO %s", [session['email']])

        SET event TO cur.fetchone()

        SET parent_id TO event['PARENT_ID']

        SET cur.execute("SELECT * FROM events WHERE EVENT_ID TO %s", [EVENT_ID])

        SET result TO cur.fetchone()

        SET trip_date TO result['trip_date']

        SET eventname TO result['eventname']

        SET email TO session['email']

        cur.execute(" INSERT INTO parvent(PARENT_ID,EVENT_ID,trip_date ,eventname) VALUES (%s,%s,%s,%s) ", (parent_id,EVENT_ID,trip_date  , eventname) )

        SET cur.execute("UPDATE STUDENT_EVENT tb2 LEFT JOIN STUDENT tb1 ON tb1.STUDENT_ID TO tb2.student_id RIGHT JOIN events TB3 on tb3.event_id TO TB2.event_id RIGHT JOIN parents tb4 on tb4.parent_id TO tb1.parent_id SET APPLIED TO True WHERE tb2.eventname=%s and email TO %s", (eventname, session['email'] ,))

        mysql.connection.commit()



        cur.close()

        flash('Event applied' , 'success')

        RETURN redirect(url_for('dashboard'))





@app.route('/#')

DEFINE FUNCTION hash():

    RETURN render_template('index')







IF __name__ EQUALS '__main__':

    SET app.secret_key TO 'SPDASDDLP334DZX'

    app.run(debug=True, port=5000)
